   lua_package_path '/usr/local/openresty/lualib/?.lua;;';
   resolver 127.0.0.11 ipv6=off;

    # cache for discovery metadata documents
    lua_shared_dict discovery 1m;
    # cache for JWKs
    lua_shared_dict jwks 1m;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;
    lua_ssl_verify_depth 5;


    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
	
    server { # simple reverse-proxy
      listen 9432 ssl default_server;
	  
	    server_tokens off;
     

      ssl_certificate      /etc/nginx/cert/aida.crt;
      ssl_certificate_key  /etc/nginx/cert/aida.key;
      ssl_protocols       TLSv1.1 TLSv1.2 TLSv1.3;

      ssl_session_cache    shared:SSL:5m;
      ssl_session_timeout  5m;

	    proxy_buffers         8 16k;  # Buffer pool = 8 buffers of 16k
      proxy_buffer_size     16k;    # 16k of buffers from pool used for headers

      ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
      ssl_prefer_server_ciphers  on;

      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
      
      set $session_storage cookie;
      more_clear_headers  'Server';
      #add_header Last-Modified $date_gmt;
      #add_header Cache-Control 'no-store, no-cache';

      location / {
         access_by_lua_block {
          local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
          if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.status = ngx.HTTP_NOT_ALLOWED 
                  ngx.header['content-type'] = 'text/html'
                  ngx.say("<h1 style='text-align: center;'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
          end
      }
	      proxy_pass      ${UI_URL};
		    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        more_clear_headers  "Access-Control-Allow-Origin";
        more_clear_headers  "Cache-Control";
        add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-store, max-age=0";
        more_clear_headers  "Access-Control-Allow-Origin: $host";
        
      }
	  
      location = /api/auth/silentSSO/ {
         access_by_lua_block {
          local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
          if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.status = ngx.HTTP_NOT_ALLOWED 
                  ngx.header['content-type'] = 'text/html'
                  ngx.say("<h1 style='text-align: center;'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
          end
      }
		proxy_pass      ${UI_URL}/api/auth/silentSSO/;
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host; 

        more_clear_headers  "Access-Control-Allow-Origin";
        more_clear_headers  "Cache-Control";

        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-store, max-age=0";
        add_header Set-Cookie "key=value; SameSite=Strict";
        
        add_header Access-Control-Allow-Origin "$host";

	  }

	  location = /api/jwt {
       access_by_lua_block {
          local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
          if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.header['content-type'] = 'text/html'
                  ngx.say("<h1 style='text-align: center;'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
          end
      }
                proxy_pass ${UI_URL}/api/jwt/;
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-Forwarded-Port $requested_port;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Server $host;    
                more_clear_headers  "Access-Control-Allow-Origin";
                more_clear_headers  "Cache-Control";
                
                add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-Frame-Options "SAMEORIGIN";
                add_header X-XSS-Protection "1; mode=block";
                add_header Cache-Control "no-store, max-age=0";
                add_header Access-Control-Allow-Origin "$host";
                add_header Set-Cookie "key=value; SameSite=Strict";

                }

      location = /predictedJobHistory/ {
		
		  access_by_lua '
		    local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
            if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.status = ngx.HTTP_NOT_ALLOWED 
                  ngx.header["content-type"] = "text/html"
                  ngx.say("<h1 style=\'text-align: center;\'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
            end
			local opts = {
				public_key= os.getenv("DWC_PUBLIC_KEY")
			}
			local opts2 = {
			introspection_endpoint=os.getenv("KEYCLOAK_URL").."/keycloak/auth/realms/aida/protocol/openid-connect/token/introspect",
			client_id = "nginx",
			ssl_verify = "no"
			}
			-- call instrospect
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				local res2, err2 = require("resty.openidc").introspect(opts2)
				if err2 or not res2 then
					ngx.status = 403
					ngx.say(err and err or "No access_token provided")
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end
			end
      
          ';
	      proxy_pass      ${PROPHET_URL}/predictedJobHistory;
		  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
          more_clear_headers  "Access-Control-Allow-Origin";
        more_clear_headers  "Cache-Control";
          add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-XSS-Protection "1; mode=block";
          add_header Cache-Control "no-store, max-age=0";
          add_header Access-Control-Allow-Origin "$host";
          add_header Set-Cookie "key=value; SameSite=Strict";
      }

	  location = /api/jwt/create-session {
		access_by_lua '
		  local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
            if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.status = ngx.HTTP_NOT_ALLOWED 
                  ngx.header["content-type"] = "text/html"
                  ngx.say("<h1 style=\'text-align: center;\'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
            end
			local opts = {
				public_key= os.getenv("DWC_PUBLIC_KEY")
			}
			-- call instrospect
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				ngx.status = 403
				ngx.say(err and err or "No access_token provided")
				ngx.exit(ngx.HTTP_FORBIDDEN)
			end

          ';
		  proxy_pass      ${UI_URL}/api/jwt/create-session;
		  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
          more_clear_headers  "Access-Control-Allow-Origin";
          more_clear_headers  "Cache-Control";

          add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-XSS-Protection "1; mode=block";
          add_header Cache-Control "no-store, max-age=0";
          add_header Set-Cookie "key=value; SameSite=Strict";
          add_header Access-Control-Allow-Origin "$host";
	  }

	  location /api/swagger {
		  proxy_pass      ${UI_URL}/api/swagger;
		  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
          more_clear_headers  "Access-Control-Allow-Origin";
           more_clear_headers  "Cache-Control";
          add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-Frame-Options "SAMEORIGIN";
          add_header X-XSS-Protection "1; mode=block";
          add_header Cache-Control "no-store, max-age=0";
          add_header Access-Control-Allow-Origin "$host";
	  }

	  location /api/ {
		  access_by_lua '
          local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
            if (host_ip_env ~= "") then
              if ngx.var.host ~= host_ip_env then
                  ngx.status = ngx.HTTP_NOT_ALLOWED 
                  ngx.header["content-type"] = "text/html"
                  ngx.say("<h1 style=\'text-align: center;\'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
                  ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
              end
            end
		  	  local opts = {
				public_key= os.getenv("DWC_PUBLIC_KEY")
			  }
			  local opts2 = {
			   discovery = "https://"..ngx.var.http_host.."/keycloak/auth/realms/aida/.well-known/openid-configuration",
         ssl_verify = "no"
			 }
			 -- call bearer_jwt_verify for OAuth 2.0 Bearer Access Token validation
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				local res2, err2 = require("resty.openidc").bearer_jwt_verify(opts2)
				if err2 then
				ngx.status = 403
				ngx.say(err2)
				ngx.exit(ngx.HTTP_FORBIDDEN)
				end
			end
		  ';
		proxy_pass  ${UI_URL}/api/;
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        more_clear_headers  "Access-Control-Allow-Origin";
        more_clear_headers  "Cache-Control";
        add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-store, max-age=0";
        add_header Access-Control-Allow-Origin "$host";
	  }

set $requested_port '';
 access_by_lua '
    local host_ip_env=os.getenv("EXTERNAL_HOSTNAME")
    if (host_ip_env ~= "") then
      if ngx.var.host ~= host_ip_env then
          ngx.status = ngx.HTTP_NOT_ALLOWED 
          ngx.header["content-type"] = "text/html"
          ngx.say("<h1 style=\'text-align: center;\'>Host not matching, check the EXTERNAL_HOSTNAME environment variable.<br> Please refer to the documentation.</h>")
          ngx.exit(ngx.HTTP_NOT_ALLOWED  )  
      end
    end
 local port
 if string.find(ngx.var.http_host, ":") then
 ngx.var.requested_port = string.match(ngx.var.http_host, ":(.*)")
 else
 ngx.var.requested_port = ngx.var.server_port
 end

 ';

      location /keycloak {
        proxy_pass ${KEYCLOAK_URL};
		    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;

        more_clear_headers  "Access-Control-Allow-Origin";
        more_clear_headers  "Cache-Control";

        add_header Content-Security-Policy "img-src 'self' data:; default-src 'self' 'unsafe-inline' ;frame-ancestors 'self';";
        add_header X-Content-Type-Options "nosniff";
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-store, max-age=0";
        add_header Access-Control-Allow-Origin "$host";
      }
    }
